<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue3学习笔记</title>
      <link href="/2022/12/24/vue3/"/>
      <url>/2022/12/24/vue3/</url>
      
        <content type="html"><![CDATA[<h3 id="1-邂逅-Vue3-开发"><a href="#1-邂逅-Vue3-开发" class="headerlink" title="1.邂逅 Vue3 开发"></a>1.邂逅 Vue3 开发</h3><h3 id="1-1-安装和使用-Vue-这个-JavaScript-库的方式"><a href="#1-1-安装和使用-Vue-这个-JavaScript-库的方式" class="headerlink" title="1.1 安装和使用 Vue 这个 JavaScript 库的方式"></a>1.1 安装和使用 Vue 这个 JavaScript 库的方式</h3><ul><li>方式一:在页面中通过 CDN（内容分发网络）的方式来引入;<script src="https://unpkg.com/vue@next"></script></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    &lt;div id=<span class="string">&quot;app&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@next&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;       <span class="comment">//Vue代码</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">template</span>: <span class="string">&quot;&lt;h2&gt;Hello World&lt;/h2&gt;&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);    <span class="comment">//把app挂载到id为app的div上</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="comment">//还可以写为 const why=&#123;template:&lt;h2&gt;Hello&lt;/h2&gt;&#125;; const app=Vue.createApp(why) app.mount(&quot;#app&quot;)</span></span><br><span class="line"><span class="comment">//或者 Vue.createApp(&#123;template: &quot; &lt;h2&gt;hihihi&lt;/h2&gt;&quot;&#125;).mount(&quot;#app&quot;)&#125;</span></span><br></pre></td></tr></table></figure><ul><li>方式二:下载 Vue 的 JavaScript 文件，手动引入;<br>打开 CDN 链接，复制其中所有的代码;<br>创建一个新的文件，比如 vue.js，将代码复制到其中;<br>通过 script 标签，引入刚才的文件:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>方式三:通过 npm 包管理工具安装使用它(webpack 再讲);</li><li>方式四:直接通过 Vue CLI 创建项目，并且使用它;</li></ul><h3 id="1-2-编程范式"><a href="#1-2-编程范式" class="headerlink" title="1.2 编程范式"></a>1.2 编程范式</h3><p>Vue:声明式编程（关注 what to do，由框架(机器)完成 “how”部分）<br>JavaScript：命令式编程（关注 how to do，每个操作都需要 JS 编写代码给浏览器指令）</p><h3 id="1-3-template-属性"><a href="#1-3-template-属性" class="headerlink" title="1.3 template 属性"></a>1.3 template 属性</h3><p><em>表示的是 Vue 需要帮助我们渲染的模板信息</em></p><ul><li>它里面的 HTML 标签会<strong>替换</strong>掉其挂载到的元素(比如 id 为 app 的 div)的 innerHTML;</li><li>模板中有一些比如，@click 等模板特有的语法<br>但是这个模板的写法有点过于别扭且 IDE 很可能没有提示，阻碍编程的效率。<br>两种解决方式:<br>方式一:使用 script 标签，标记 type&#x3D;”x-template”</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;x-template&quot;</span> id=<span class="string">&quot;why&quot;</span>&gt;...&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title class_">Vue</span>.<span class="title function_">creatApp</span>(&#123;<span class="attr">template</span>:<span class="string">&quot;#why&quot;</span>&#125;)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>在 createApp 的对象中传入的 template 以#开头:被用作 querySelector，并且使用匹配元素的 innerHTML 作为模板字符串;</p><p>方式二:使用任意标签(通常使用 template 标签，因为不会被浏览器渲染)，设置 id;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;why&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">scrip</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">Vue.creatApp(&#123;template:&quot;#why&quot;&#125;).mount(&quot;xxx&quot;);</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>template 元素是一种用于保存客户端内容的机制，该内容再加载页面时不会被呈现，但随后可以在运行时使用 JavaScript 实例化;</p><h3 id="1-4-data-属性："><a href="#1-4-data-属性：" class="headerlink" title="1.4 data 属性："></a>1.4 data 属性：</h3><pre><code>必须传入一个函数且返回对象。data 中返回的对象会被 Vue 的响应式系统劫持，之后对该对象的修改或者访问都会在劫持中被处理。如：data **()&#123;**return &#123;counter: 100,classObj:&#123;active:true,title:true&#125;&#125;;</code></pre><h3 id="2-Vue-基础-模版语法"><a href="#2-Vue-基础-模版语法" class="headerlink" title="2.Vue 基础-模版语法"></a>2.Vue 基础-模版语法</h3><h3 id="2-1-methods-属性："><a href="#2-1-methods-属性：" class="headerlink" title="2.1 methods 属性："></a>2.1 methods 属性：</h3><pre><code>methods 属性是一个对象，通常会在这个对象中定义很多的方法:_是 methods 别写成 method_在该方法中可以使用 this 关键字来直接访问到 data 中返回的对象的属性;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">up() &#123;</span><br><span class="line">this.counter++;</span><br><span class="line">&#125;,</span><br><span class="line">down() &#123;</span><br><span class="line">this.counter--;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>&lt;img src=&quot;vue3/1.png&quot;&gt;问题一:为什么不能使用箭头函数(官方文档有给出解释)?问题二:不使用箭头函数的情况下，this 到底指向的是什么?(可以作为一道面试题)</code></pre><h3 id="2-2-实现打关键字就快速生成代码片段"><a href="#2-2-实现打关键字就快速生成代码片段" class="headerlink" title="2.2 实现打关键字就快速生成代码片段"></a>2.2 实现打关键字就快速生成代码片段</h3><p>1.复制需要生成的代码，在 VSCode 中选择配置用户代码片段功能，在生成的 json 文件中输入“代码块命名”{} 2.用 <a href="https://snippet-generator.app/">https://snippet-generator.app/</a> 网站生成代码片段，填写代码描述和 tap trigger（触发片段的关键字），复制生成的代码块 3.把代码块复制回 json 文件中保存，若要生成不同代码块可以在最大的{}里用逗号把俩需要的代码块隔开。</p><h3 id="2-3-Mustache-双大括号语法"><a href="#2-3-Mustache-双大括号语法" class="headerlink" title="2.3 Mustache 双大括号语法"></a>2.3 Mustache 双大括号语法</h3><pre><code>用于把数据显示到模板中- &#123;&#125;中可以有 data 中的属性/JS 表达式/方法名等- 一对标签中可以用-隔开要显示的两个&#123;&#125;&#123;&#125;。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2&gt;&#123;&#123;message&#125;&#125;-&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br></pre></td></tr></table></figure>- 里面不可以写语句（如赋值语句，if 语句等）</code></pre><h3 id="2-4-一些不常用的指令"><a href="#2-4-一些不常用的指令" class="headerlink" title="2.4 一些不常用的指令"></a>2.4 一些不常用的指令</h3><pre><code>v-once:当数据发生变化时，元素或者组件以及其所有的*子元素*将视为静态内容并且跳过;v-html:让 html 内容也可以被 vue 解析出来 用法 v-html=&#39;属性名&#39;v-pre:跳过元素和它的子元素的编译过程，显示原始的 Mustache 标签:</code></pre><h3 id="2-5-常用指令"><a href="#2-5-常用指令" class="headerlink" title="2.5 常用指令"></a>2.5 常用指令</h3><pre><code>v-bind：用于*动态绑定*模版的属性，如 a 的 href，img 的 src缩写: :</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;a v-bind:href=&quot;xxxx&quot;&gt;&lt;/a&gt;</span><br><span class="line">&lt;img v-bind:src=&quot;xxxx&quot;&gt;</span><br><span class="line">简写：</span><br><span class="line">&lt;a :href=&quot;xxxx&quot;&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>它还可以</p><ul><li><p>绑定 class 可以给 class 添加判断属性动态切换:<br>:class&#x3D;<font color="red">“{</font>‘active’:isActive,title:true<font color="red">}”</font> or :class&#x3D;”classObj”&#x2F;&#x2F;isActive 为 vue 中设置的动态变化的 bool 值.classObj 为 data 属性或者 methods 方法等<br>可以绑定一个 class 列表: :class&#x3D;”[]”*数组里可以加三元运算符，还可以嵌套一个对象{}</p></li><li><p>绑定 style：绑定一些 CSS 内联样式<br>因为某些样式需根据数据动态决定，如某段文字的颜色大小等<br><em>样式命名，要么用驼峰法如 fontSize，要么需用引号括起来如’font-size’</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div :style=<span class="string">&quot;color=&#x27;red&#x27;,fontSize:size+&#x27;px&#x27; &quot;</span>&gt;</span><br><span class="line"><span class="comment">//key可以不加单引号，如果值不是变量对象的话需加单引号.值还可以是data中的属性值对象/methods中的方法；style还可以等于数组=&quot;[]&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>动态绑定属性<br><strong>属性名称不固定时</strong>：<br>div :[name]&#x3D;”value”<br>&#x2F;&#x2F;name 为 data 属性</p></li><li><p>绑定一个对象<br>将一个对象的所有属性，绑定到元素上的所有属性<br>div v-bind&#x3D;“xxx”(xxx 为 data 属性，里面可以有几个不同的属性对)</p></li></ul><h3 id="2-6-v-on-绑定事件"><a href="#2-6-v-on-绑定事件" class="headerlink" title="2.6 v-on 绑定事件"></a>2.6 v-on 绑定事件</h3><pre><code>缩写:@</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-<span class="attr">on</span>:mousemove=<span class="string">&#x27;xxx&#x27;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&#x27;counter++&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>        <span class="comment">//绑定表达式</span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on</span>=<span class="string">&quot;&#123;click=btn1Click,mousemove=mouseMove&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>    <span class="comment">//绑定对象</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>参数传递<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=<span class="string">&quot;btn2Click($event,&#x27;why&#x27;,18)&quot;</span>&gt;&lt;/button&gt;</span><br><span class="line">...</span><br><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">  <span class="title function_">btn2Click</span>(<span class="params">event,name,age</span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(name,age,event)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">///event对象是默认传入的，$event可以获取事件发生时的事件对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-7-条件渲染"><a href="#2-7-条件渲染" class="headerlink" title="2.7 条件渲染"></a>2.7 条件渲染</h3><ul><li>v-if， v-else，v-else-if</li><li>条件为 true 时才能渲染出来。里面不仅可以等于 bool 值属性，还可以时判断表达式如 v-if&#x3D;”score&gt;90”<ul><li>v-show<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template id=<span class="string">&quot;my-app&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>哈哈哈哈<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li>v-show 和 v-if 区别<ul><li>v-show 是不支持 template；</li><li>v-show 不可以和 v-else 一起使用；</li><li>v-show 元素无论是否需要显示到浏览器上，它的 DOM 实际都是有渲染的，只是通过 CSS 的 display 属性来进行切换.v-if 当条件为 false 时，其对应的原生压根不会被渲染到 DOM 中；<br>开发中，如果原生要在显示和隐藏之间频繁切换，使用 v-show；<br>如果不会频繁的发生切换，使用 v-if；</li></ul></li></ul><h3 id="2-8-列表渲染"><a href="#2-8-列表渲染" class="headerlink" title="2.8 列表渲染"></a>2.8 列表渲染</h3><pre><code>- item in 数组（item 是给元素起的别名）</code></pre><ul><li><p>如需索引，格式：”(item,index) in 数组”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;li v-for=&quot;(item, index) in movies&quot;&gt;&#123;&#123;index+1&#125;&#125;-&#123;&#123;item&#125;&#125;&lt;/li&gt;</span><br></pre></td></tr></table></figure></li><li><p>支持遍历对象：<br>一个参数：”value in&#x2F;of object”;<br>二个参数：”(value, key) in object”;<br>三个参数：”(value, key, index) in object”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;li v-for=&quot;(value, key, index) in info&quot;&gt;</span><br><span class="line">    &#123;&#123;index&#125;&#125; - &#123;&#123;key&#125;&#125; - &#123;&#123;value&#125;&#125;</span><br><span class="line">  &lt;/li&gt;</span><br></pre></td></tr></table></figure></li><li><p>支持遍历数字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;li v-for=&quot;item in 10&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</span><br></pre></td></tr></table></figure></li><li><p>数组更新检测<br>push()<br>pop()<br>shift()<br>unshift()<br>splice()<br>sort()<br>reverse()<br>上面的方法会直接修改原来的数组，但某些方法不会替换原来的数组而是生成新的数组，如 filter()、concat() 和 slice()。</p></li><li><p>v-for 中使用 key<br>在使用 v-for 进行列表渲染时:常给元素或者组件绑定一个 key 属性。<br>key 属性主要用在 Vue 的虚拟 DOM 算法，在<strong>新旧 nodes</strong>对比时辨识<strong>VNodes</strong>；<br>如果不使用 key:Vue 会使用一种最大限度减少动态元素并且尽可能的尝试就地修改&#x2F;复用相同类型元素的算法；<br>使用 key:会基于 key 的变化重新排列元素顺序，并且会移除&#x2F;销毁 key 不存在的元素；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;li v-<span class="keyword">for</span>=<span class="string">&quot;item in letters&quot;</span> :key=<span class="string">&quot;item&quot;</span>&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</span><br></pre></td></tr></table></figure></li><li><p>VNode 全称:Virtual Node，也就是虚拟节点;<br>组件和元素最终在 Vue 中表示出来的都是一个个 VNode;VNode 的本质是一个 JavaScript 的对象;</p></li></ul><p>Vue 在进行 diff 算法的时候，会尽量利 key 来进行优化操作：在没有 key 的时候效率非常低；在进行插入或者重置顺序的时候，保持相同的 key 可以让 diff 算法更加的高效；</p><h3 id="3-Vue3-的-Options-API"><a href="#3-Vue3-的-Options-API" class="headerlink" title="3.Vue3 的 Options-API"></a>3.Vue3 的 Options-API</h3><h3 id="3-1computed"><a href="#3-1computed" class="headerlink" title="3.1computed"></a>3.1computed</h3><p>需要对数据进行转化后显示，或要将多个数据结合起来显示时，若用表达式，放入大量逻辑会让模版过重和难以维护。<br>对于任何包含响应式数据的复杂逻辑，都应使用计算属性。<br>计算属性在使用时不需加()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用时：</span></span><br><span class="line">&lt;h2&gt;&#123;&#123;fullname&#125;&#125;&lt;/h2&gt;</span><br><span class="line"><span class="comment">//定义时：</span></span><br><span class="line"> <span class="attr">computed</span>: &#123;</span><br><span class="line">        <span class="title function_">fullname</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&quot; &quot;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span>;</span><br><span class="line">        &#125;&#125;</span><br></pre></td></tr></table></figure><p>计算属性会基于它们的依赖关系进行缓存;在数据不发生变化时，计算属性不需要重新计算;而 methods 每次都会重新调用。<br>如果依赖的数据发生变化，在使用时，计算属性依然会重新进行计算;</p><ul><li>getter 方法：计算属性大多情况下只需要用此方法，此时直接将计算属性写成一个函数即可。</li><li>setter 方法：设置计算属性的值</li></ul><h3 id="3-2-侦听器-watch"><a href="#3-2-侦听器-watch" class="headerlink" title="3.2 侦听器 watch"></a>3.2 侦听器 watch</h3><p>监听代码逻辑中某个数据的变化</p><p>默认情况下，watch 只侦听 info 的引用变化，对于内部属性的变化不会做出响应（如修改 info.name 的话侦听不到）<br>深层侦听：deep 选项<br>立即执行一次：immediate 选项</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">      <span class="title function_">info</span>(<span class="params">newValue, oldValue</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(newValue, oldValue);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">//监听某具体属性</span></span><br><span class="line">      <span class="string">&quot;info.name&quot;</span>: <span class="keyword">function</span>(<span class="params">newName, oldName</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(newName, oldName);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// info: &#123;</span></span><br><span class="line">      <span class="comment">//   handler(newinfo, oldinfo) &#123;</span></span><br><span class="line">      <span class="comment">//   &#125;,</span></span><br><span class="line">      <span class="comment">//   deep: true</span></span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line">      <span class="comment">//监听的另一种写法：写在methods里</span></span><br><span class="line">      <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">const</span> unwatch = <span class="variable language_">this</span>.$watch(</span><br><span class="line">            <span class="string">&quot;info&quot;</span>,</span><br><span class="line">            <span class="keyword">function</span> (<span class="params">newInfo, oldInfo</span>) &#123;</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">log</span>(newInfo, oldInfo);</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">deep</span>: <span class="literal">true</span>,</span><br><span class="line">              <span class="attr">immediate</span>: <span class="literal">true</span>,</span><br><span class="line">            &#125;</span><br><span class="line">          );</span><br><span class="line">          <span class="comment">//unwatch()</span></span><br><span class="line"></span><br><span class="line">  <span class="string">``</span><span class="string">`</span></span><br></pre></td></tr></table></figure><h3 id="3-5-零碎遗忘知识点"><a href="#3-5-零碎遗忘知识点" class="headerlink" title="3.5 零碎遗忘知识点"></a>3.5 零碎遗忘知识点</h3><p>某条件时禁用按钮-disabled&#x3D;”true”&#x2F;表达式</p><h3 id="16-浅拷贝和深拷贝"><a href="#16-浅拷贝和深拷贝" class="headerlink" title="16.浅拷贝和深拷贝"></a>16.浅拷贝和深拷贝</h3><p>对象赋值是指向对象的内存地址<br>浅拷贝：<br>const obj &#x3D; Object.assign({}, info);<br>拷贝对象里的属性，不拷贝对象里的对象。对象里的对象仍然是指向同一个内存地址<br>深拷贝：<br>const obj &#x3D; JSON.parse(JSON.stringify(info));</p><h3 id="4-Vue3-表单绑定和开发模式"><a href="#4-Vue3-表单绑定和开发模式" class="headerlink" title="4.Vue3 表单绑定和开发模式"></a>4.Vue3 表单绑定和开发模式</h3><h3 id="4-1-v-model"><a href="#4-1-v-model" class="headerlink" title="4.1 v-model"></a>4.1 v-model</h3><p>v-model 指令可以在表单 input、textarea 以及 select 元素上创建<strong>双向数据绑定</strong>;它会根据控件类型自动选取正确的方法来更新元素。<br>原理</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1.v-bind value的绑定 2.监听input事件, 更新message的值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;message&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;inputChange&quot;</span> /&gt;</span></span><br><span class="line">... methods: &#123; inputChange(event) &#123; this.message = event.target.value; &#125; &#125;</span><br></pre></td></tr></table></figure><p>写法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1.绑定textarea --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;intro&quot;</span>&gt;</span></span><br><span class="line">  自我介绍</span><br><span class="line">  <span class="tag">&lt;<span class="name">textarea</span></span></span><br><span class="line"><span class="tag">    <span class="attr">name</span>=<span class="string">&quot;intro&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">&quot;intro&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model</span>=<span class="string">&quot;intro&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>intro: &#123;&#123;intro&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2.checkbox --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2.1.单选框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;agree&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;agree&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;isAgree&quot;</span> /&gt;</span> 同意协议</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>isAgree: &#123;&#123;isAgree&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2.2.多选框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>你的爱好: <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;basketball&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;basketball&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobbies&quot;</span> <span class="attr">value</span>=<span class="string">&quot;basketball&quot;</span> /&gt;</span></span><br><span class="line">  篮球</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;football&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;football&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobbies&quot;</span> <span class="attr">value</span>=<span class="string">&quot;football&quot;</span> /&gt;</span></span><br><span class="line">  足球</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;tennis&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;tennis&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobbies&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tennis&quot;</span> /&gt;</span> 网球</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>hobbies: &#123;&#123;hobbies&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">//多选框时标签里面要记得跟value，否则v-model里的值没有区分度</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 3.radio --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>你的爱好: <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;male&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;male&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span> /&gt;</span>男</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;female&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;female&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span> /&gt;</span>女</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>gender: &#123;&#123;gender&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 4.select --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>喜欢的水果: <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;fruit&quot;</span> <span class="attr">multiple</span> <span class="attr">size</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;apple&quot;</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;orange&quot;</span>&gt;</span>橘子<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;banana&quot;</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>fruit: &#123;&#123;fruit&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">... data() &#123; return &#123; intro: &quot;Hello World&quot;, isAgree: false, hobbies:</span><br><span class="line">[&quot;basketball&quot;], gender: &quot;&quot;, fruit: &quot;orange&quot; &#125; &#125;,</span><br></pre></td></tr></table></figure><ul><li>model 修饰符<ul><li>lazy ： 默认情况下 v-model 双向绑定时绑定的是<strong>input</strong>事件，每次内容输入后就将最新的值和绑定的属性进行同步;如果在 v-model 后跟上 lazy 修饰符，那么会将绑定的事件切换为<strong>change</strong>事件，只有在提交时(比如回车) 才会触发;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; v-model.lazy=&quot;message&quot;&gt;</span><br></pre></td></tr></table></figure></li><li>number：默认情况下 v-model 绑定 string 类型，即使设置 type 为 number 也是 string 类型。<br>转换成数字类型：.number 修饰符（可以把数字部分转成对应的数字类型<br>在进行逻辑判断时，可以把 string 类型进行隐式转换（隐式的自动将一个 string 类型成一个 number 类型再来进行判断</li><li>trim：<br>过滤用户输入的守卫空白字符</li></ul></li></ul><h3 id="4-2-组件化开发"><a href="#4-2-组件化开发" class="headerlink" title="4.2 组件化开发"></a>4.2 组件化开发</h3><pre><code>- 注册全局组件：在全局创建的 app 注册，通过 component 方法传入组建名称、组建对象，之后可以直接在 App 组件的 template 中直接使用  定义时可以用驼峰或者短横线分割符命名，但是调用的时候要用短横线分隔符<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;my-app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">component-b</span>&gt;</span><span class="tag">&lt;/<span class="name">component-b</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">component-name</span>&gt;</span><span class="tag">&lt;/<span class="name">component-name</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;component-b&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line">...</span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&quot;component-b&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&quot;#component-b&quot;</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&quot;Hello World&quot;</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>- 缺点：往往是在应用程序一开始就会全局组件完成，如果某些组件并没被用到，也会一起被注册。会增加包的大小，所以在开发中通常使用组件的时候采用的都是局部注册</code></pre><ul><li><p>局部组件注册：常用<br>在需要使用到的组件中，通过 components 属性选项来进行注册;比如之前的 App 组件中，有 data、computed、methods 等选项了，事实上还可以有一个 components 选项;<br>该 components 选项对应的是一个对象，对象中的键值对是 组件的名称: 组件对象;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template id=<span class="string">&quot;component-a&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是组件A<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是内容, 哈哈哈哈<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line">.....</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ComponentA</span> = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&quot;#component-a&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">App</span> = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;#my-app&#x27;</span>,</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="comment">// key: 组件名称</span></span><br><span class="line">    <span class="comment">// value: 组件对象</span></span><br><span class="line">    <span class="title class_">ComponentA</span>: <span class="title class_">ComponentA</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&quot;Hello World&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line"><span class="comment">// app.component(&quot;ComponentA&quot;, ComponentA);</span></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-3-Vue-开发模式"><a href="#4-3-Vue-开发模式" class="headerlink" title="4.3 Vue 开发模式"></a>4.3 Vue 开发模式</h3><p>随着项目越来越复杂，会采用组件化的方式来进行开发:每个组件都会有自己的模板、脚本逻辑、样式等;可以通过一个后缀名为 .vue 的 single-file components (单文件组件) 来解决。<br>使用 SFC 的.vue 文件，比较常见的是两种方式:</p><ul><li>方式一:使用 Vue CLI 来创建项目，项目会默认帮助配置好所有的配置选项，可以在其中直接使用.vue 文件;</li><li>方式二:自己使用 webpack 或 rollup 或 vite 这类打包工具，对其进行打包处理;<br>做项目&#x2F;在公司进行开发，通常都会采用 Vue CLI 的方式来完成。</li></ul><h3 id="5-webpack-基础打包"><a href="#5-webpack-基础打包" class="headerlink" title="5.webpack 基础打包"></a>5.webpack 基础打包</h3><h3 id="5-1-webpack-是什么"><a href="#5-1-webpack-是什么" class="headerlink" title="5.1 webpack 是什么"></a>5.1 webpack 是什么</h3><p>webpack 是一个静态的模块化打包工具，为现代的 JavaScript 应用程序;</p><ul><li>打包 bundler:可以帮助进行打包，是一个打包工具</li><li>静态的 static:最终可以将代码打包成最终的静态资源(部署到静态服务器);</li><li>模块化 module:默认支持各种模块化开发，ES Module、CommonJS、AMD 等;</li><li>现代的 modern:因为现代前端开发面临各种各样的问题，催生了 webpack 的出现和发展;<img src="/2022/12/24/vue3/2.png"></li></ul><h3 id="5-2-webpack-的打包"><a href="#5-2-webpack-的打包" class="headerlink" title="5.2 webpack 的打包"></a>5.2 webpack 的打包</h3><ul><li>创建全局 webpack:在 terminal 下直接执行 webpack 命令。会生成一个 dist 文件夹，里面存放一个 main.js 的文件，这就是打包之后的文件:运行 webpack 时，webpack 会查找当前目录下的 src&#x2F;index.js 作为入口;，如果当前项目中没有存在 src&#x2F;index.js 文件，那么会报错;<br>也可通过配置指定入口和出口：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npx webpack --entry ./src/main.js --output-path ./buid</span><br><span class="line">//main.js和buid是自己重新设置的文件名</span><br></pre></td></tr></table></figure><ul><li><p>创建局部 webpack：<br><br> 1.创建 package.json 文件，用于管理项目的信息、库依赖等：npm init（要在确认文件名等的时候敲很多回车，若不想敲回车，可以直接用 npm init -y）<br> 2.安装局部的 webpack：<br>npm install webpack webpack -cli -D <br>3.使用局部的 webpack：<br>npx webpack <br><br>or<br>在 package.json 中创建 scripts 脚本，执行脚本打包即可<br>“scripts”:{<br>“build”:”webpack”<br>};<br>执行：npm run build</p></li><li><p>webpack 配置文件<br>在复杂情况下需要改文件名的时候，也得更改配置：<br>创建一个 webpack.config.js 文件作为配置文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path=<span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="comment">//导出配置信息</span></span><br><span class="line"> <span class="variable language_">module</span>.<span class="property">exports</span>=&#123;</span><br><span class="line">   <span class="attr">entry</span>:<span class="string">&quot;./src/main.js&quot;</span>, <span class="comment">//index.js更改后的文件名</span></span><br><span class="line">   <span class="attr">output</span>:&#123;</span><br><span class="line">     filename=<span class="string">&quot;bundle.js&quot;</span>, <span class="comment">//更改生成的main.js名</span></span><br><span class="line">     <span class="attr">path</span>:path.<span class="title function_">resove</span>(__dirname,<span class="string">&quot;./dist&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>这样就不需要执行改名命令，直接执行 npm run build</p></li></ul><h3 id="5-3-css-loader-的使用"><a href="#5-3-css-loader-的使用" class="headerlink" title="5.3 css-loader 的使用"></a>5.3 css-loader 的使用</h3><p>loader：可用于对模块的源代码进行转换</p><ul><li><p>css-loader:</p><ol><li>安装：npm install css-loader -D</li><li>使用方案<br>配置方式：在 webpack.config.js 文件中写明配置信息<br>module.rules 的配置:rules 属性对应的值是一个数组[Rule]，Rule 是一个对象，对象中可设置多个属性.<br>test 属性:用于对 resource(资源)进行匹配，通常设置成正则表达式;<br>use 属性:对应的值是数组:[UseEntry]（UseEntry 是一个对象，可通过对象的属性设置一些其他属性 （loader:必须有一个 loader 属性，对应值是一个字符串;options:可选的属性，值是一个字符串或者对象，值会被传入到 loader 中; ））<br>传递字符串(如:use: [ ‘style-loader’ ])是 loader 属性的简写方式(如:use: [ { loader: ‘style-loader’} ]);<br>loader 属性: Rule.use: [ { loader } ] 的简写。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"><span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line"><span class="attr">output</span>: &#123;</span><br><span class="line"><span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;./build&quot;</span>),</span><br><span class="line"><span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line"><span class="attr">rules</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="comment">//正则表达式</span></span><br><span class="line">    <span class="comment">// 1.loader的写法(语法糖)</span></span><br><span class="line">    <span class="comment">// loader: &quot;css-loader&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.完整的写法</span></span><br><span class="line">    <span class="attr">use</span>: [</span><br><span class="line">      <span class="comment">// &#123;loader: &quot;css-loader&quot;&#125;</span></span><br><span class="line">      <span class="string">&quot;style-loader&quot;</span>,</span><br><span class="line">      <span class="string">&quot;css-loader&quot;</span>,</span><br><span class="line">      <span class="string">&quot;postcss-loader&quot;</span></span><br><span class="line">      <span class="comment">// &#123;</span></span><br><span class="line">      <span class="comment">//   loader: &quot;postcss-loader&quot;,</span></span><br><span class="line">      <span class="comment">//   options: &#123;</span></span><br><span class="line">      <span class="comment">//     postcssOptions: &#123;</span></span><br><span class="line">      <span class="comment">//       plugins: [</span></span><br><span class="line">      <span class="comment">//         require(&quot;autoprefixer&quot;)</span></span><br><span class="line">      <span class="comment">//       ]</span></span><br><span class="line">      <span class="comment">//     &#125;</span></span><br><span class="line">      <span class="comment">//   &#125;</span></span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><ol start="3"><li>安装 style-loader<br>因为 css-loader 只是负责将.css 文件进行解析，并不会将解析之后的 css 插入到页面中。完成插入 style 的操作需要 style-loader;<br>安装：npm install style-loader -D</li><li>配置 style-loader<br>在配置文件中，添加 style-loader;<br>因为 loader 的<font color="red">执行顺序是从右向左</font>(或者说从下到上，或者说从后到前的)，所以我们需要将 style- loader 写到 css-loader 的前面;</li><li>编译 npm run build</li></ol></li></ul><h3 id="5-4-less-等预处理器"><a href="#5-4-less-等预处理器" class="headerlink" title="5.4 less 等预处理器"></a>5.4 less 等预处理器</h3><p>开发中使用 less、sass、stylus 的预处理器编写 css 样式，效率会更高。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@bgColor</span>: blue;</span><br><span class="line"><span class="keyword">@textDecoration</span>: underline;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: @bgColor;</span><br><span class="line">  <span class="attribute">text-decoration</span>: @textDecoration;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>less 工具处理：</li></ul><ol><li>npm install less -D</li><li>npx lessc .&#x2F;src&#x2F;css&#x2F;title.less title.css</li></ol><ul><li>less-loader：实现大量 css 自动转换<ol><li>npm install less-loader -D</li><li>配置 webpack.config.js<br>test:&#x2F;.less$&#x2F;,<br>use:[<br>{loader:”style-loader”},<br>{loader:”css-loader”},<br>{loader:less-loader”}<br>] 3.执行 npm run build</li></ol><ul><li>PostCSS<br>通过 JavaScript 来转换样式的工具;<br>可以进行一些 CSS 的转换和适配，如自动添加浏览器前缀、css 样式的重置; 实现这些功能需要借助于 PostCSS 对应的插件;<br>步骤:<br>p 第一步:查找 PostCSS 在构建工具中的扩展，比如 webpack 中的 postcss-loader; p 第二步:选择可以添加需要的 PostCSS 相关的插件;<br>命令行使用 PostCSS:</li></ul></li></ul><ol><li>安装 postcss、postcss-cli:<br>npm install postcss postcss-cli -D</li><li>编写一个需要添加前缀的 css<br><a href="https://autoprefixer.github.io/">https://autoprefixer.github.io/</a> (可以在网站中查询一些添加 css 属性的样式;)</li><li>添加插件 autoprefixer：<br>安装：npm instal autoprefixer -D<br>使用：npx postcss –use autoprefixer -o end.css .&#x2F;src&#x2F;css&#x2F;style.css 4.安装 postcss-loader<br>npm install postcss-loader -D<br>修改 css 的 loader 或者把配置信息放在单独文件中管理<br>{<br>loader: “postcss-loader”,<br>options: {<br>postcssOptions: {<br>plugins: [<br>require(“autoprefixer”)<br>]<br>}<br>}<br>或者：在根目录下创建 postcss.config.js<br>module.exports&#x3D; {<br>plugins: [<br>require(“autoprefixer”)<br>],}<br>事实上，在配置 postcss-loader 时，配置插件并不需要使用 autoprefixer。可以使用另外一个插件:postcss-preset-env。它可以将一些现代的 CSS 特性，转成大多数浏览器认识的 CSS，且根据目标浏览器或者运行时环境添加所需的 polyfill;会自动添加 autoprefixer。步骤是用指令安装：npm install postcss-present-env -D。之后，直接修改掉之前的 autoprefixer 即可</li></ol><h3 id="5-5-webpack-打包其他资源"><a href="#5-5-webpack-打包其他资源" class="headerlink" title="5.5 webpack 打包其他资源"></a>5.5 webpack 打包其他资源</h3><ul><li><p>加载图片案例</p><ol><li>img 元素，设置 src 属性;</li><li>其他元素(比如 div)，设置 background-image 的 css 属性;<br>file-loader:处理 jpg、png 等格式的图片对应的 loader;作用是帮助处理 import&#x2F;require()方式引入的文件资源，并且会放到我们输出的文件夹中;<br>安装：npm install file-loader -D<br>当在 element.js 文件中使用图片 src 时，需要配置处理图片的 rule：<br>{test:&#x2F;.(png|jpe?g|gif|svg)$i,<br>use:{<br>loader:”file-loader”<br>}<br>}<br>然后引用时直接引用：imgEl.src &#x3D; zzhnImage;</li></ol></li><li><p>设置文件名称<br>使处理后的文件名称按照一定规则显示：如保留原来的文件名，扩展名，同时让其包含一个 hash 值。使用 PlaceHolders 完成。<br>常用 placeholder：<br>[ext]: 处理文件的扩展名;<br><br>[name]:处理文件的名称;<br><br>[hash]:文件的内容，使用 MD4 的散列函数处理，生成的一个 128 位的 hash 值(32 个十六进制);<br>[contentHash]:在 file-loader 中和[hash]结果是一致的(在 webpack 的一些其他地方不一样，后面会讲到);<br>[hash:<length>]:截图 hash 的长度，默认 32 个字符太长了;<br>[path]:文件相对于 webpack 配置文件的路径;<br>{<br>test: &#x2F;.(jpe?g|png|gif|svg)$&#x2F;,<br>use: {<br>loader: “file-loader”,<br>options: {<br>&#x2F;&#x2F; outputPath: “img”,<br>name: “img&#x2F;[name]_[hash:6].[ext]”<br>}</length></p></li><li><p>url-loader<br>和 file-loader 的工作方式相似，但可以将较小的文件(如较小图片)，转成 base64 的 URI。<br>步骤：<br>安装:npm install url-loader -D<br>将上面 use 中的 file 改成 url 即可</p><p>开发中往往是小的图片需要转换，但是大的图片直接使用图片即可。因为小的图片转换 base64 之后可以和页面一起被请求，减少不必要的请求过程; 而大的图片也进行转换，反而会影响页面的请求速度;<br>限制转换与否的图片大小：用它的 options 属性 limit，可以用于设置转换的限制;<br>options：{<br>limit:100*1024 &#x2F;&#x2F;只换&lt;100kb 的<br>name: “img&#x2F;[name]_[hash:6].[ext]”<br>}</p></li><li><p>asset module type<br>webpack5 后可以用 asset moudule type(资源模块模型)替代 raw-loader,url-loader,file-loader<br>{<br>test: &#x2F;.(jpe?g|png|gif|svg)$&#x2F;,<br>type: “asset”,<br>generator: {<br>filename: “img&#x2F;[name]_[hash:6][ext]”<br>},<br>parser: {<br>dataUrlCondition: {<br>maxSize: 100 * 1024<br>}<br>}<br>}</p></li><li><p>plugin<br>Loader是用于对特定的模块类型进行转换<br>Plugin可以用于执行更广泛的任务，如打包优化、资源管理、环境变量注入等<br>插件CleanWebpakPlugin：修改配置后重新打包时删除dist文件夹</p><ol><li>安装:npm install clean-webpack-plugin -D</li><li>在插件中配置：<br> const { CleanWebpackPlugin } &#x3D; require(“clean-webpack-plugin”);<br> …<br> HtmlWebpackPlugin:对index.html进行打包处理</li><li>npm install html-webpack-plugin -D</li></ol></li></ul><p>module.exports&#x3D;{<br>  …<br>plugins: [<br>    new CleanWebpackPlugin(),</p><pre><code>new HtmlWebpackPlugin(&#123;  template: &quot;./public/index.html&quot;,  title: &quot;哈哈哈哈&quot;&#125;),new DefinePlugin(&#123;  BASE_URL: &quot;&#39;./&#39;&quot;&#125;),new CopyWebpackPlugin(&#123;  patterns: [    &#123;      from: &quot;public&quot;,      to: &quot;./&quot;,      globOptions: &#123;        ignore: [          &quot;**/index.html&quot;        ]      &#125;    &#125;  ]&#125;)</code></pre><p>  ]<br>  }</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS知识点拾遗</title>
      <link href="/2022/12/23/first/"/>
      <url>/2022/12/23/first/</url>
      
        <content type="html"><![CDATA[<h3 id="1-嵌套块元素外边距合并导致塌陷问题："><a href="#1-嵌套块元素外边距合并导致塌陷问题：" class="headerlink" title="1.嵌套块元素外边距合并导致塌陷问题："></a>1.嵌套块元素外边距合并导致塌陷问题：</h3><p>A.可以利用 border 为父元素添加上边框 border-top:1px solid black;<br>B.为父元素添加内边距 padding:1px;<br>C.为父元素设置 overflow overflow：hidden</p><h3 id="2-清除浮动"><a href="#2-清除浮动" class="headerlink" title="2.清除浮动"></a>2.清除浮动</h3><p><em>父级没高度&#x2F;子盒子浮动了&#x2F;影响下面布局了</em></p><table><thead><tr><th>清除浮动的方式</th></tr></thead><tbody><tr><td>额外标签法(隔墙法)</td></tr><tr><td><strong>父级 overflow:hidden;</strong></td></tr><tr><td><strong>父级 after 伪元素</strong></td></tr><tr><td><strong>父级双伪元素</strong></td></tr></tbody></table><ol><li>父级元素添加 overflow:hidden、 auto 或 scroll</li><li>after 伪元素法&#x2F;双伪元素清除浮动法：给父级元素添加（元素设置内容空，转块元素设置高度 0，清除两边浮动，最后一个类似 overflow，只不过是占位）</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">  <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">  <span class="comment">/*IE6、7 专有*/</span></span><br><span class="line">  *zoom: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>clear:both</li></ol><h3 id="3-选择器优先级："><a href="#3-选择器优先级：" class="headerlink" title="3.选择器优先级："></a>3.选择器优先级：</h3><p>选择器权重如下表所示。</p><table><thead><tr><th>选择器</th><th>选择器权重</th></tr></thead><tbody><tr><td>继承或者+</td><td>0,0,0.0</td></tr><tr><td>元素选择器</td><td>0.0.0,1</td></tr><tr><td>类选择器，伪类选择器</td><td>0,0,1,0</td></tr><tr><td>ID 选择器</td><td>0,1,0,0</td></tr><tr><td>行内样式 syele&#x3D;””</td><td>1,0,0,0</td></tr><tr><td>imporant 重要的</td><td>无穷大</td></tr></tbody></table><p>属性选择器：0,0,1,0<br>伪元素选择器：权重 1</p><h3 id="4-书写顺序"><a href="#4-书写顺序" class="headerlink" title="4.书写顺序"></a>4.书写顺序</h3><p>建议遵循以下顺序:</p><ol><li>布局定位属性: display &#x2F; position&#x2F; float&#x2F; clear &#x2F; visibility&#x2F; overflow (建议 display 第一个写 ,毕竟关系到模式)</li><li>自身属性: width&#x2F; height &#x2F; margin&#x2F; padding &#x2F; border&#x2F; background</li><li>文本属性: color &#x2F; font &#x2F; text-decoration&#x2F; text- align&#x2F; vertical- align&#x2F; white- space &#x2F; break-word</li><li>其他属性(CSS3 ) : content &#x2F; cursor &#x2F; border-radius &#x2F; box- shadow &#x2F; text- shadow&#x2F; background:linear-gradient…</li></ol><h3 id="5-定位"><a href="#5-定位" class="headerlink" title="5.定位"></a>5.定位</h3><p>1.浮动可以让多个块级盒子一 行没有缝隙排列显示,经常用于横向排列盒子。 2.定位则是可以让盒子自由的在某个盒子内移动位置或者固定屏幕中某个位置,并且可以压住其他盒子。</p><p>定位 &#x3D; 定位模式 + 边偏移 。</p><p>子绝父相：子级是绝对定位的话，父级要用相对定位。<br>固定定位：以浏览器可视区为参考。若要固定在版心右侧—1. left: 50%. 2. margin-left<br><img src="/2022/12/23/first/5.png"></p><p>2.边偏移<br>边偏移就是定位的盒子移动到最终位置。有 top. bottom、 left 和 right 4 个属性。</p><table><thead><tr><th>边偏移属性</th><th>示例</th><th>描述</th></tr></thead><tbody><tr><td>top</td><td>top: 80px</td><td>顶端偏移量，定义元素相对于其父元素上边线的距离。</td></tr><tr><td>bottom</td><td>bottom: 80px</td><td>底部偏移量，定义元素相对于其父元素下边线的距离。</td></tr><tr><td>left</td><td>left: 80px</td><td>左侧偏移量，定义元素相对于其父元素左边线的距离。</td></tr><tr><td>right</td><td>right: 80px</td><td>右侧偏移量，定义元素相对于其父元素右边线的距离</td></tr></tbody></table><p>粘性定位：相对定位与固定定位的混合</p><p>定位叠放顺序：z-index: (数值越大越靠上，数值后不能 ➕ 单位)<br>加了绝对定位的盒子不能用 margin 实现水平居中</p><p>绝对定位&#x2F;相对定位&#x2F;浮动：给行内元素添加后可以直接设置宽度和高度；块元素添加后默认变为内容大小</p><h3 id="6-圆角边框，小圆点"><a href="#6-圆角边框，小圆点" class="headerlink" title="6.圆角边框，小圆点"></a>6.圆角边框，小圆点</h3><p>圆角边框：border-radius: 15px;<br>小圆点：border-radius:50%;</p><h3 id="7-透明度"><a href="#7-透明度" class="headerlink" title="7.透明度"></a>7.透明度</h3><p>rgb( , , ,x) （取值范围（0，1）</p><h3 id="8-元素的显示与隐藏："><a href="#8-元素的显示与隐藏：" class="headerlink" title="8.元素的显示与隐藏："></a>8.元素的显示与隐藏：</h3><p>display: none ;隐藏(不占有位置)||block ;转换为块级元素,显示元素<br>visibility:hidden;隐藏(占有位置)||visible;<br>多余部分元素的显示与隐藏:overflow:</p><h3 id="9-让图片和父元素一样大"><a href="#9-让图片和父元素一样大" class="headerlink" title="9.让图片和父元素一样大:"></a>9.让图片和父元素一样大:</h3><p>width:100%;height:100%;</p><h3 id="10-背景可以选择图片："><a href="#10-背景可以选择图片：" class="headerlink" title="10.背景可以选择图片："></a>10.背景可以选择图片：</h3><p>background(url:xxxx) no-repeat center;</p><h3 id="11-精灵图："><a href="#11-精灵图：" class="headerlink" title="11.精灵图："></a>11.精灵图：</h3><p>也是在 style 里面用。一般通过<strong>背景图片</strong>位置实现,负值 background:url(…..) no-repeat xpx ypx;<br>或者用：<strong>background-position：xpx ypx</strong></p><h3 id="12-一行排列数个边框"><a href="#12-一行排列数个边框" class="headerlink" title="12.一行排列数个边框"></a>12.一行排列数个边框</h3><p>可以用：ul li 无序列表加边框，要 list-style:none 消去列表项符号且用 float 使他们同一行显示。再用 margin-left:-1px</p><p>提高盒子的显示序列可以加定位如相对定位，或者加 z-index。让选中的元素优先显示。</p><h3 id="13-让块级元素内的行内元素-x2F-行内块元素水平居中："><a href="#13-让块级元素内的行内元素-x2F-行内块元素水平居中：" class="headerlink" title="13.让块级元素内的行内元素&#x2F;行内块元素水平居中："></a>13.让块级元素内的行内元素&#x2F;行内块元素水平居中：</h3><p>给块级元素 text-align: center。<br>因为 maigin 的 auto 无法作用于行内元素和行内块元素</p><h3 id="14-css-初始化："><a href="#14-css-初始化：" class="headerlink" title="14.css 初始化："></a>14.css 初始化：</h3><p>*{margin:0 padding:0}-内外边距清零。还有 li{list-style:none},去掉图片下方空隙，清除浮动等<br>每个网页布局前都要初始化</p><h3 id="15-结构伪类选择器"><a href="#15-结构伪类选择器" class="headerlink" title="15.结构伪类选择器"></a>15.结构伪类选择器</h3><p>结构伪类选择器主要根据<strong>文档结构</strong>来选择器元素，常用于根据父级选择器里面的子元素</p><table><thead><tr><th>选择符</th><th>简介</th></tr></thead><tbody><tr><td>E:first-child</td><td>匹配父元素中的第一个子元素 E</td></tr><tr><td>E:last-child</td><td>匹配父元素中最后一个 E 元素</td></tr><tr><td>E:nth-child(n)</td><td>匹配父元素中的第 n 个子元素 E</td></tr><tr><td>E:first-of-type</td><td>指定类型 E 的第一个</td></tr><tr><td>E:last-of-type</td><td>指定类型 E 的最后一个</td></tr><tr><td>E:nth-of-type(n)</td><td>指定类型 E 的第 n 个</td></tr></tbody></table><p>nth-child(n):n 可以是数字、关键字和公式。如是数字，n 从 1 开始。如是公式，从 0 开始。<br>nth-of-type 排列的是父元素内指定的子元素</p><table><thead><tr><th>公式</th><th>取值</th></tr></thead><tbody><tr><td>2n</td><td>偶数</td></tr><tr><td>2n+1</td><td>奇数</td></tr><tr><td>5n</td><td>5 10 15…</td></tr><tr><td>n+5</td><td>从第 5 个开始(包含第五个)到最后</td></tr><tr><td>-n+5</td><td>前 5 个(包含第 5 个) …</td></tr></tbody></table><h3 id="16-伪元素选择器"><a href="#16-伪元素选择器" class="headerlink" title="16.伪元素选择器"></a>16.伪元素选择器</h3><table><thead><tr><th>选择符</th><th>简介</th></tr></thead><tbody><tr><td>::before</td><td>在元素内部的前面插入内容</td></tr><tr><td>::after</td><td>在元素内部的后面插入内容</td></tr></tbody></table><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>: :before</span><br><span class="line"><span class="comment">/*这个content是必须要写的*/</span></span><br><span class="line">content:</span><br><span class="line"><span class="string">&#x27;我&#x27;</span> ;</span><br></pre></td></tr></table></figure><p>语法：<font color="red">element::before {}</font><br>before 和 after <strong>必须有 content 属性</strong><br>伪元素常常<strong>与设置三角形结合使用</strong>(设置一条边的颜色，让其他边透明）<br>如：div::before {<br>content:”” &#x2F;&#x2F;必备属性<br>width: 0;<br>height: 0;<br>border: 50px solid transparent;<br>border-left-color: pink;&#x2F;&#x2F;或 border-color:#fff transparent transparent;<br>}<br>border-color 可以 x or x,x or x,x,x（上，下，左&amp;右） or x,x,x,x（上，下，左，右）</p><h3 id="17-把行内元素转化为行内块元素："><a href="#17-把行内元素转化为行内块元素：" class="headerlink" title="17.把行内元素转化为行内块元素："></a>17.把行内元素转化为行内块元素：</h3><p><font color="red">display：inline-block</font><br>隐藏元素的显现：display:none</p><h3 id="18-box-sizing"><a href="#18-box-sizing" class="headerlink" title="18.box-sizing:"></a>18.box-sizing:</h3><p>border-box 让盒子大小为 width</p><h3 id="19-transition"><a href="#19-transition" class="headerlink" title="19.transition:"></a>19.transition:</h3><p>要过渡的属性 花费时间 运动曲线 何时开始;</p><ol><li>如果想要所有的属性都变化过渡， 写一个 all 就可以。</li><li>花费时间: 单位是 秒(必须写单位) 比如 0.5s</li></ol><h3 id="20-把边框改为圆角："><a href="#20-把边框改为圆角：" class="headerlink" title="20.把边框改为圆角："></a>20.把边框改为圆角：</h3><p>border-radius</p><h3 id="21-让-input-表单里文本框在鼠标点击后没有边框，"><a href="#21-让-input-表单里文本框在鼠标点击后没有边框，" class="headerlink" title="21.让 input 表单里文本框在鼠标点击后没有边框，"></a>21.让 input 表单里文本框在鼠标点击后没有边框，</h3><p>可以用 outline:none</p><h3 id="22-设置背景简写："><a href="#22-设置背景简写：" class="headerlink" title="22.设置背景简写："></a>22.设置背景简写：</h3><p>规则（顺序）如下：<br><font color="red">background：color img_url repeat attachment position &#x2F; size</font><br>颜色 图片地址 重复 是否固定 位置 &#x2F; 尺寸**<br>举例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">images/mess.png</span>) no-repeat left center;</span><br><span class="line">或者是分开写：</span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">images/wrong.png</span>);</span><br><span class="line"><span class="attribute">Background</span>—<span class="attribute">position</span>：center <span class="attribute">right</span>;</span><br></pre></td></tr></table></figure><p><em>插眼：设置内外边距距离：padding-left: 20px;</em></p><h3 id="23-元素有多类名时："><a href="#23-元素有多类名时：" class="headerlink" title="23.元素有多类名时："></a>23.元素有多类名时：</h3><p>若两个类名属性产生冲突，它取决于 css 样式表中后读取到的属性</p><h3 id="24-鼠标经过时"><a href="#24-鼠标经过时" class="headerlink" title="24.鼠标经过时:"></a>24.鼠标经过时:</h3><p><strong>a:hover{…}</strong></p><h3 id="25-元素经过时显示为鼠标样式："><a href="#25-元素经过时显示为鼠标样式：" class="headerlink" title="25.元素经过时显示为鼠标样式："></a>25.元素经过时显示为鼠标样式：</h3><p><strong>cursor: pointer;</strong></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/12/22/hello-world/"/>
      <url>/2022/12/22/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
